#!/usr/bin/env python3
"""Return the mac address table using Netmiko."""
from __future__ import print_function
from __future__ import unicode_literals

import argparse
import sys
import os
import subprocess
import threading
import re
from pprint import pprint
try:
    from Queue import Queue
except ImportError:
    from queue import Queue
from datetime import datetime
from getpass import getpass
import concurrent.futures

from netmiko import ConnectHandler
from netmiko.utilities import load_devices, display_inventory
from netmiko.utilities import obtain_all_devices
from netmiko.utilities import obtain_netmiko_filename, write_tmp_file, ensure_dir_exists
from netmiko.utilities import find_netmiko_dir, get_template_dir
from netmiko.utilities import SHOW_RUN_MAPPER
from netmiko.ssh_exception import NetMikoTimeoutException
from paramiko.ssh_exception import SSHException
from netmiko.ssh_exception import AuthenticationException
from netaddr import EUI, mac_unix_expanded

template_dir = os.path.expanduser("~/ntc-templates/lib")
print ("Templates in %s" % template_dir)
if os.path.exists(template_dir):
    pprint (template_dir)
    sys.path.append(template_dir)

from ntc_templates.parse import parse_output

NETMIKO_BASE_DIR = '~/.netmiko'
ERROR_PATTERN = "%%%failed%%%"
__version__ = '0.1.0'

# Arista (^\w{2}\d+|^\w{2}\D+\d+)
# Cisco (^\w{2})\D+(\d+/\d+/\d+|\d+/\d+|\d+)
# Final (^\w{2})\D+(\d+/\d+/\d+|\d+/\d+|\d+)|(^\w{2})(\d+/\d+|\d+)

def ssh_conn(device_name, a_device, output_q):
    try:
        net_connect = ConnectHandler(**a_device)
        net_connect.enable()

    except (AuthenticationException):
        output = "{} Authentication failure: {}".format(ERROR_PATTERN, device_name)
    except (NetMikoTimeoutException):
        output = "{} Timeout to device: {}".format(ERROR_PATTERN, device_name)
    except (EOFError):
        output = "{} End of file while attempting device {}".format(ERROR_PATTERN, device_name)
    except (SSHException):
        output = "{} SSH issue, is ssh enabled? {}".format(ERROR_PATTERN, device_name)
    except Exception:
        output = ERROR_PATTERN
    else:

        macs = net_connect.send_command_expect('show mac address-table', use_textfsm=True)
        ports = net_connect.send_command_expect('show interfaces status', use_textfsm=True)
        net_connect.disconnect()
        output = { device_name: { 'ports': ports, 'macs': macs}}
    output_q.put({device_name: output})

    return output

# As the routers are inconsistant in how they return port names we have to normalize it
# This takes the GigabitEthernet1/1 or Port-channel111 that is returned in the interfaces status result
# and converts it to the short Gi1/1 or Po111, basically 2 letters with a number possibly a / and another number.
# it also accounts for the stacked switches where the port number is number / number / number
# also on the arista where you get the number / number on the higher speed multi ports.
def get_port_key(port):
    pat = re.compile('(^\w{2})\D+(\d+/\d+/\d+|\d+/\d+|\d+)|(^\w{2})(\d+/\d+|\d+)', re.IGNORECASE)
    elements = pat.findall(port)
    key = [''.join(e) for e in elements]
    return str(key[-1])

# Build a map of the port data indexed by port name
def build_port_map(device, data):
    port_map = dict()
    for port in data['ports']:
        key = get_port_key(port['port'])
        port_map[key] = port
    return port_map
# Display the access port mac addresses
# Don't care about any of the trunk ports or other system type ports
def display_macs(device, data):
    port_map = build_port_map(device, data)
    for mac in data['macs']:
        try:
            mac_address = EUI(mac['mac_address'])
        except KeyError:
            try: 
                mac_address = EUI(mac['destination_address'])
            except KeyError:
                continue
        mac_address.dialect = mac_unix_expanded
        if isinstance(mac['destination_port'], list):
            mac_port = mac['destination_port'][-1]
        else:
            mac_port = mac['destination_port']
        if mac_port == 'Cpu' or mac_port == 'system' or mac_port == 'Switch' or mac_port == 'Router':
            continue
        mac_port = get_port_key(mac_port)
        if port_map[mac_port]['vlan'] == 'trunk':
            continue
        print (device, mac_address, mac_port, mac['vlan'])

def parse_arguments(args):
    """Parse command-line arguments."""
    description = "Return output from single show cmd using Netmiko (defaults to running-config)"
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("devices", nargs='?', help="Device or group to connect to",
                        action="store", type=str)
    parser.add_argument("--username", help="Username", action="store", type=str)
    parser.add_argument("--secret", help="Enable Secret", action="store_true")
    parser.add_argument("--use-cache", help="Use cached files", action="store_true")
    parser.add_argument("--list-devices", help="List devices from inventory", action="store_true")
    parser.add_argument("--display-runtime", help="Display program runtime", action="store_true")
    parser.add_argument("--hide-failed", help="Hide failed devices", action="store_true")
    parser.add_argument("--version", help="Display version", action="store_true")
    cli_args = parser.parse_args(args)
    if not cli_args.list_devices and not cli_args.version:
        if not cli_args.devices:
            parser.error('Devices not specified.')
    return cli_args


def main(args):
    start_time = datetime.now()
    cli_args = parse_arguments(args)

    cli_username = cli_args.username if cli_args.username else None
    cli_password = getpass() 
    cli_secret = getpass("Enable secret: ") if cli_args.secret else None

    version = cli_args.version
    if version:
        print("netmiko-dump-macs v{}".format(__version__))
        return 0
    list_devices = cli_args.list_devices
    if list_devices:
        my_devices = load_devices()
        display_inventory(my_devices)
        return 0

    device_or_group = cli_args.devices.strip()
    pattern = r"."
    use_cached_files = cli_args.use_cache
    hide_failed = cli_args.hide_failed

    output_q = Queue()
    my_devices = load_devices()
    if device_or_group == 'all':
        device_group = obtain_all_devices(my_devices)
    else:
        try:
            devicedict_or_group = my_devices[device_or_group]
            device_group = {}
            if isinstance(devicedict_or_group, list):
                for tmp_device_name in devicedict_or_group:
                    device_group[tmp_device_name] = my_devices[tmp_device_name]
            else:
                device_group[device_or_group] = devicedict_or_group
        except KeyError:
            return "Error reading from netmiko devices file." \
                   " Device or group not found: {0}".format(device_or_group)

    # Retrieve output from devices
    my_files = []
    failed_devices = []
    if not use_cached_files:
        for device_name, a_device in device_group.items():
            if cli_username:
                a_device['username'] = cli_username 
            if cli_password:
                a_device['password'] = cli_password
            if cli_secret:
                a_device['secret'] = cli_secret
            cli_command = SHOW_RUN_MAPPER.get(a_device['device_type'], 'show mac address-table')
        future_device = dict()
        with concurrent.futures.ThreadPoolExecutor(max_workers = 6) as executor:
            for device_name, a_device in device_group.items():
                print ("Get mac address table from %s" % (device_name))
                thread = executor.submit(ssh_conn,device_name, a_device, output_q)
                future_device[thread] = device_name
            for future in concurrent.futures.as_completed(future_device):
                device = future_device[future]
                try:
                    data = future.result()
                except Exception as exc:
                    print ("%r generated an exception: %s" % (device, exc))
                else:
                    port_map = build_port_map(device, data[device])
                    display_macs(device, data[device])

    else:
        for device_name in device_group:
            file_name = obtain_netmiko_filename(device_name)
            try:
                with open(file_name) as f:
                    output = f.read()
            except IOError:
                return("Some cache files are missing: unable to use --use-cache option.")
            if ERROR_PATTERN not in output:
                my_files.append(file_name)
            else:
                failed_devices.append(device_name)

    if cli_args.display_runtime:
        print("Total time: {0}".format(datetime.now() - start_time))

    if not hide_failed:
        if failed_devices:
            print("\n")
            print("-" * 20)
            print("Failed devices:")
            failed_devices.sort()
            for device_name in failed_devices:
                print("  {}".format(device_name))
            print()
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
